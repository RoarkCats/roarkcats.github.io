[
  {
    "objectID": "index.html#welcome-to-crakt",
    "href": "index.html#welcome-to-crakt",
    "title": "Home",
    "section": "Welcome to Crakt",
    "text": "Welcome to Crakt\nCrakt is a small site by RoarkCats hosting various miscellaneous items and posts‚Ä¶\n\nblame Jeffrey\n\n\nMy Things You Won‚Äôt Find Here\nbut should definitely check out!\n\nüêà‚Äç GitHub Repos (new!)\nü¶¥ ZipCode Datapacks & Community (‚ô°)\n‚öôÔ∏è Modrinth Datapacks (wip!)\nüî• CurseForge Projects (modpacks!)\n‚ñ∂Ô∏è YouTube Videos (~0.5 vid / yr!)\n‚úñÔ∏è Twitter X Posts (reach out!)"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Posts",
    "section": "",
    "text": "Inject 1\n\n\n\n\n\n\ninject\n\n\nincus\n\n\nexperiment\n\n\n\nIncus usage\n\n\n\n\n\nApr 26, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nInject 0\n\n\n\n\n\n\ninject\n\n\nminecraft\n\n\npodman\n\n\n\nPodman public modded minecraft server\n\n\n\n\n\nApr 26, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n.qmd and python jupyter blocks\n\n\n\n\n\n\nfilter1\n\n\nfilter2\n\n\n\ndescription\n\n\n\n\n\nFeb 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAbout Quarto\n\n\n\n\n\n\nfilter1\n\n\nfilter2\n\n\n\ndescription\n\n\n\n\n\nFeb 20, 2024\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/inject1/index.html",
    "href": "posts/inject1/index.html",
    "title": "Inject 0",
    "section": "",
    "text": "Inject 1\nThis week Jeffrey has requested that I setup a modded Minecraft server accessible to the public for team building! He has added a twist, however, the server must be setup with Podman (an alt to Docker) and rootless at that!\nI‚Äôm not sure how doable this is, but we‚Äôll give it a shot\n\nRequirement Steps\n\nSetup Podman\nMake Podman rootless\nSetup modded Minecraft container\nTest public connection\n\n\nI chose Ubuntu 24 Noble because that‚Äôs what I use managing my own MC server so it‚Äôs what I‚Äôm more used to. I could have chosen something new but I wanted this to be a learning experience about Podman more so than an OS learning experience.\nUbuntu typically comes in 3 variants I noticed: default, cloud, desktop. Desktop should be obvious but I was wondering what the Cloud variant was about; apparently its the same as Default except that it‚Äôs installed and compatible with cloud-init which you can read more about here https://cloud-init.io.\nAfter creation, in the configuration tab I attached the network to public0 and changed the resource limits to allow for 8gb of ram and 4 cpu cores. This should be good for a solid Minecraft server especially if multithreading is used effectively. It should be ok to half these values though (or double!) Note: only works when VM is off, also another interface were it will never load when saved, just have to save and reload page\nwip"
  },
  {
    "objectID": "posts/quarto/index.html",
    "href": "posts/quarto/index.html",
    "title": "About Quarto",
    "section": "",
    "text": "Quarto is the static site generator used to render this site.\nIt‚Äôs documentation is very extensive, and worth reading.\nInteresting/Important bits:\nQuarto has a built in category system\nThis enables users to filter documents by types.\nTheming: https://quarto.org/docs/output-formats/html-themes.html\nAt the top right of this page, there is a toggle between light and dark theme. You can edit the _quarto.yml file to edit the themes used.\nPlugins/Extensions: https://quarto.org/docs/extensions/\nPlugins add functionality to quarto, like being able to embed QR Codes.\nWeb based slides: https://quarto.org/docs/presentations/revealjs/\nI used Reveal JS slides for the presentation\nUnder the hood, Quarto uses Pandoc and supports all of it‚Äôs features."
  },
  {
    "objectID": "posts/inject0/index.html",
    "href": "posts/inject0/index.html",
    "title": "Inject 1",
    "section": "",
    "text": "Inject 0\nI imported the .pfx directly to my pc by simply running it since chrome wasn‚Äôt accepting that type of cert file. Upon chrome relaunch, I select the Incus cert when loading the site anew and it worked.\nIncus seems nice albeit a little buggy, quite a few buttons get stuck on loading until you reload the page such as when stopping the server or"
  },
  {
    "objectID": "posts/qmd/index.html",
    "href": "posts/qmd/index.html",
    "title": ".qmd and python jupyter blocks",
    "section": "",
    "text": "What are qmd files?\n.qmd files are files special to quarto. The short version of it is that quarto renders these files, which are essentially markdown files, to jupyter notebooks, where it then executes and renders any python code.\n\n\nExamples\n\nprint(\"Hello World!\")\n\nprint(3 + 2)\n\nHello World!\n5\n\n\nQuarto is designed for data science, and this means having executable code blocks that do something. For example, Quarto can use matplotlib in python to plot things.\nWhere things get interesting is the combination of three factors:\n\nThe output of these code blocks can be done as plain text, rather than a code block, by putting #| output: asis at the beginning of the code block.\nThe plain text output by these code blocks, is done before the markdown is rendered to other formats.\nIt‚Äôs possible to hide the code blocks but not the output, by putting #| echo: false at the beginning of the code block itself\n\nWhat this means, is that python can essentially act as a formatting engine, for generating dynamic content. Even things like using.\n#| output: asis\n#| echo: false\n\ndef make_bullets(list):\n  bulletlist = f''''''\n  for i in list:\n    bulletlist = bulletlist + \"* \"\n    bulletlist = bulletlist + i\n    bulletlist = bulletlist + \"\\n\"\n  print(bulletlist)\n\nsample_list = [\n  \"Item 1\",\n  \"Item 2\",\n  \"Item 3\"\n]\n\nmake_bullets(sample_list)\nWhich renders to:\n\nItem 1\nItem 2\nItem 3\n\nIt should be noted that I am actually using two code blocks here, one which does not execute, and does not hide itself, and another which executes and hides itself.\nYou can get even more dynamic content, if you use something like python requests to pull it as you render the site. Again, it is a bit hacky since backticks would render into a code block, so here I multiply one backticks times 3 to get a string containing 3 backticks, but it does work.\n#| output: asis\n#| echo: false\n\nimport requests\nbackticks = \"`\" * 3\n\nprint(f'''\n\n{backticks}{{.nix .code-overflow-wrap filename=home.nix}}\n{requests.get('https://raw.githubusercontent.com/ErikMcClure/bad-licenses/3c26bef3028fa8470308c493af7d7eae152a19ba/overwatch').text}\n{backticks}\n\n''')\n\n\nhome.nix\n\n                     Overwatch License Revision 2\n                          (c) Author, year\n\n\nPermission is hereby granted, free of charge, for anyone to use, distribute, or\nsell the compiled binaries, source code, and documentation (the \"Software\")\nwithout attribution.\n\nPermission to modify the Software is only granted to those that have a higher\ncompetitive matchmaking rank than the copyright holder in Overwatch 2\n(Blizzard, 2022).\n\nThe Software is provided in the hope that some will find it useful, but the\nSoftware comes under NO WARRANTY, EXPRESS OR IMPLIED, and the authors of the\nSoftware are NOT LIABLE IN THE EVENT OF LOSSES, DAMAGES OR MISUSE relating to\nthe Software."
  }
]