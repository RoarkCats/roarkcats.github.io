[
  {
    "objectID": "posts/inject1/index.html",
    "href": "posts/inject1/index.html",
    "title": "Inject 1 - Podman MC",
    "section": "",
    "text": "Inject 1\n\nIntro\nThis week Jeffrey has requested that I setup a modded Minecraft server accessible to the public for team building! He has added a twist, however, the server must be setup with Podman (an alt to Docker) and rootless at that!\nI’m not sure how doable this is, but we’ll give it a shot\n\nRequired Steps\n\nSetup Podman\nMake Podman rootless\nSetup modded Minecraft container\nTest public connection\n\n\n\n\nSystem Setup\nI chose Ubuntu 24 Noble because that’s what I use managing my own MC server so it’s what I’m more used to. I could have chosen something new but I wanted this to be a learning experience about Podman more so than an OS learning experience.\nUbuntu typically comes in 3 variants I noticed: default, cloud, desktop. Desktop should be obvious but I was wondering what the Cloud variant was about; apparently its the same as Default except that it’s installed and compatible with cloud-init which you can read more about here https://cloud-init.io.\nAfter creation, in the configuration tab I attached the network to public0 and changed the resource limits to allow for 8gb of ram and 4 cpu cores. This should be good for a solid Minecraft server especially if multithreading is used effectively. It should be ok to half these values though (or double!)\nNote: only works when VM is off, also interface never finishes loading when saved, just click save, wait a sec, and reload page\n\n\nPodman\nBy default Podman is built to be rootless, or rather built to run from the user that started its containers, so out of the box iut will be ‘rootless’ as long as you don’t run it from root or have multiple existing users which may conflict\nOne major downside to running rootless is the lack of access to privileged ports below 1024 (can’t sue default 80 for a website)\nPodman containers may not survive a reboot, so you must create a service for it or otherwise automate its startup with scripts or other\nGuide I intended to follow (verbose): https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md Guide I actually followed (well explained): https://youtu.be/69dADRzXpqk\nCommands run:\n# Ubuntu 20.10 and newer\napt-get update\napt-get -y install podman\napt-get -y install podman-compose\napt-get -y install passt # was already installed\napt-get -y install nano # if not installed\n# pasta should be selected in podman by default so no need to change settings\nreboot now\n# avoids potential errors\n# Now to make a service that will restart when your system does\nuseradd -m -s /bin/bash podmanuser\n#  home folder, shell (bash), (username)\npasswd podmanuser # optional\nsu podmanuser # not optional!\ncd # goto home dir\nnano compose.yaml # your stuff\nexit # return to root\nnano /lib/systemd/system/podman-compose.service\nsystemctl --system daemon-reload\nsystemctl enable podman-compose.service\nsystemctl start podman-compose.service\n# dont forget to address privileged port range if your user id \npodman-compose.service:\n[Unit]\nDescription=Podman-compose\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=podmanuser\nGroup=podmanuser\nType=oneshot\nRemainAfterExit=true\nExecStartPre=\nExecStart=/usr/bin/podman-compose -f /home/podmanuser/compose.yaml up -d\nExecStop=/usr/bin/podman-compose stop\n\n[Install]\nWantedBy=multi-user.target\nPodman side demo:\npodman run -d -p 8080:80/tcp --name webserver docker.io/library/httpd\n#   in bkg, ports, (ext:int ports), name, (name), container image\n# test cmd running site on 8080 public, just went to ip:8080 and \"It works!\"\npodman ps -a\n# list all containers\npodman stop webserver\npodman rm webserver\n# but now lets remove it\n# for compose same thing:\nnano compose.yaml # your stuff\npodman-compose up -d\n#            run, in bkg\ncompose.yaml:\nversion: '3'\n\nservices:\n  webserver:\n    image: docker.io/library/httpd\n    container_name: webserver\n    ports:\n      - '8080:80'\n    restart: unless-stopped\n\n\nMinecraft\nI found this compose setup online and modified it a bit to my needs, the docker image does have its own documentation though on its use\ncompose.yaml:\nservices:\n    minecraft-server:\n        image: docker.io/itzg/minecraft-server\n        container_name: minecraft\n        restart: unless-stopped\n        userns_mode: keep-id\n        stdin_open: true\n        tty: true\n        ports:\n            - \"25565:25565\"\n        environment:\n            SERVER_NAME: \"Podcraft\"\n            MOTD: \"Testing...\"\n            EULA: \"TRUE\"\n            TYPE: NEOFORGE\n            VERSION: \"1.20.1\"\n            NEOFORGE_VERSION: \"latest\"\n            MAX_MEMORY: 8G\n            VIEW_DISTANCE: 16\n            MAX_PLAYERS: 16\n            SERVER_PORT: 25565\n        volumes:\n            - /home/podmanuser/neoforge/data:/data\nCommands run:\nsu podmanuser\ncd\nnano compose.yaml\npodman-compose up -d\npodman-compose ps # check status\nexit\nloginctl enable-linger podmanuser # allow systemd to use the user automatically even when the user isn't logged in\nWhile this all does work, it seems I’ll need to spend a little more time on the service setup part as it seems not to work with the previous simple test setup"
  },
  {
    "objectID": "posts/golang/index.html",
    "href": "posts/golang/index.html",
    "title": "Golang Intro",
    "section": "",
    "text": "Setup\n\nDownloaded & installed Go from go.dev\nInstalled VSCode extension\n\n\n\nCreated standard workspace folder path ../&lt;user&gt;/go/src/&lt;projects&gt; for my modules\nCreated an example module ../example/ with a main.go file\n\nDon’t think the file has to be called ‘main’, but if it runs, there must be a file within the module that starts with package main on the first line (you also put that in main.go ofc)\n\n\n\n\nGuides & Docs\nThe docs for Go are good, but these helped me more personally\n\nLearn Go in 12 Minutes\nGo by Example\nGo Packages"
  },
  {
    "objectID": "posts/dockvm/index.html",
    "href": "posts/dockvm/index.html",
    "title": "Docker VMs & Bind Mounting",
    "section": "",
    "text": "guides (note they dont have ‘.’ after build which is needed?)\n\nhttps://danielmangum.com/posts/simple-linux-command-line-using-docker/\nhttps://flaviocopes.com/docker-access-files-outside-container/\n\nexample Dockerfile (no extension):\nFROM ubuntu:latest\ncmds from within the folder:\ndocker build . -t dockvm\ndocker run -t -d --name my_dvm -v //c/Users/Roark/external_dir:/internal_dir dockvm\ndocker ps\ndocker exec -i -t my_dvm /bin/bash\n\ndocker kill my_dvm\ndocker rm my_dvm\ndocker ps -a\n\ndocker start my_dvm\nso build sets up the Dockerfile, run creates a new container running in the bkg -d with a unique --name that has access -v to an external directory internally under an alias, ps lists the containers to show it running (or not), and exec connects you to the terminal of the container ‘vm’, kill stops it immediately and rm removes to so that the --name doesnt overlap next time, can verify its gone by checking ps -a to list all containers, can also just use start next time instead of run so you wont have to remove it but you won’t be able to change the dir\nside note docker build not really nec here, docker compose or pull should be fine for this"
  },
  {
    "objectID": "posts/qmd/index.html",
    "href": "posts/qmd/index.html",
    "title": ".qmd and python jupyter blocks",
    "section": "",
    "text": "What are qmd files?\n.qmd files are files special to quarto. The short version of it is that quarto renders these files, which are essentially markdown files, to jupyter notebooks, where it then executes and renders any python code.\n\n\nExamples\n\nprint(\"Hello World!\")\n\nprint(3 + 2)\n\nHello World!\n5\n\n\nQuarto is designed for data science, and this means having executable code blocks that do something. For example, Quarto can use matplotlib in python to plot things.\nWhere things get interesting is the combination of three factors:\n\nThe output of these code blocks can be done as plain text, rather than a code block, by putting #| output: asis at the beginning of the code block.\nThe plain text output by these code blocks, is done before the markdown is rendered to other formats.\nIt’s possible to hide the code blocks but not the output, by putting #| echo: false at the beginning of the code block itself\n\nWhat this means, is that python can essentially act as a formatting engine, for generating dynamic content. Even things like using.\n#| output: asis\n#| echo: false\n\ndef make_bullets(list):\n  bulletlist = f''''''\n  for i in list:\n    bulletlist = bulletlist + \"* \"\n    bulletlist = bulletlist + i\n    bulletlist = bulletlist + \"\\n\"\n  print(bulletlist)\n\nsample_list = [\n  \"Item 1\",\n  \"Item 2\",\n  \"Item 3\"\n]\n\nmake_bullets(sample_list)\nWhich renders to:\n\nItem 1\nItem 2\nItem 3\n\nIt should be noted that I am actually using two code blocks here, one which does not execute, and does not hide itself, and another which executes and hides itself.\nYou can get even more dynamic content, if you use something like python requests to pull it as you render the site. Again, it is a bit hacky since backticks would render into a code block, so here I multiply one backticks times 3 to get a string containing 3 backticks, but it does work.\n#| output: asis\n#| echo: false\n\nimport requests\nbackticks = \"`\" * 3\n\nprint(f'''\n\n{backticks}{{.nix .code-overflow-wrap filename=home.nix}}\n{requests.get('https://raw.githubusercontent.com/ErikMcClure/bad-licenses/3c26bef3028fa8470308c493af7d7eae152a19ba/overwatch').text}\n{backticks}\n\n''')\n\n\nhome.nix\n\n                     Overwatch License Revision 2\n                          (c) Author, year\n\n\nPermission is hereby granted, free of charge, for anyone to use, distribute, or\nsell the compiled binaries, source code, and documentation (the \"Software\")\nwithout attribution.\n\nPermission to modify the Software is only granted to those that have a higher\ncompetitive matchmaking rank than the copyright holder in Overwatch 2\n(Blizzard, 2022).\n\nThe Software is provided in the hope that some will find it useful, but the\nSoftware comes under NO WARRANTY, EXPRESS OR IMPLIED, and the authors of the\nSoftware are NOT LIABLE IN THE EVENT OF LOSSES, DAMAGES OR MISUSE relating to\nthe Software."
  },
  {
    "objectID": "index.html#welcome-to-crakt",
    "href": "index.html#welcome-to-crakt",
    "title": "Home",
    "section": "Welcome to Crakt",
    "text": "Welcome to Crakt\nCrakt is a small site by RoarkCats hosting various miscellaneous items and posts…\n\nblame Jeffrey\n\n\nMy Things You Won’t Find Here\nbut should definitely check out!\n\n🐈‍ GitHub Repos (new!)\n🦴 ZipCode Datapacks & Community (♡)\n⚙️ Modrinth Datapacks (wip!)\n🔥 CurseForge Projects (modpacks!)\n▶️ YouTube Videos (~0.5 vid / yr!)\n✖️ Twitter X Posts (reach out!)"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nGolang Intro\n\n\n\ngo\n\nprogramming\n\nlanguage\n\nexperiment\n\n\n\nLearning the Go programming language\n\n\n\n\n\nJul 12, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nDocker VMs & Bind Mounting\n\n\n\ndocker\n\ncontainers\n\nmounting\n\nexperiment\n\n\n\nUsing Docker containers as VMs to access external files via bind mounting\n\n\n\n\n\nJun 14, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nInject 1 - Podman MC\n\n\n\ninject\n\nminecraft\n\npodman\n\n\n\nPodman rootless public modded Minecraft server\n\n\n\n\n\nMay 31, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nInject 0 - Incus\n\n\n\ninject\n\nincus\n\nexperiment\n\n\n\nIncus usage\n\n\n\n\n\nApr 26, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n.qmd and python jupyter blocks\n\n\n\n\n\ndescription\n\n\n\n\n\nFeb 20, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nAbout Quarto\n\n\n\n\n\ndescription\n\n\n\n\n\nFeb 20, 2024\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/inject0/index.html",
    "href": "posts/inject0/index.html",
    "title": "Inject 0 - Incus",
    "section": "",
    "text": "Inject 0\nI imported the .pfx directly to my pc by simply running it since chrome wasn’t accepting that type of cert file. Upon chrome relaunch, I select the Incus cert when loading the site anew and it worked.\nIncus seems nice albeit a little buggy, quite a few buttons get stuck on loading until you reload the page such as when stopping the server or"
  },
  {
    "objectID": "posts/quarto/index.html",
    "href": "posts/quarto/index.html",
    "title": "About Quarto",
    "section": "",
    "text": "Quarto is the static site generator used to render this site.\nIt’s documentation is very extensive, and worth reading.\nInteresting/Important bits:\nQuarto has a built in category system\nThis enables users to filter documents by types.\nTheming: https://quarto.org/docs/output-formats/html-themes.html\nAt the top right of this page, there is a toggle between light and dark theme. You can edit the _quarto.yml file to edit the themes used.\nPlugins/Extensions: https://quarto.org/docs/extensions/\nPlugins add functionality to quarto, like being able to embed QR Codes.\nWeb based slides: https://quarto.org/docs/presentations/revealjs/\nI used Reveal JS slides for the presentation\nUnder the hood, Quarto uses Pandoc and supports all of it’s features."
  }
]